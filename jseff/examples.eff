(** Overview of syntax *)

(* Before we take a look at effects, let us see the rest of Eff.
   If you have ever programmed in OCaml, Eff should be very familiar as it
   closely follows OCaml in everything except in the approach to effects.
   If you are not familiar with OCaml, you should try it out at
      http://try.ocamlpro.com *)

(* You can define variables. *)
let x = 10 + 10
let y = x * 3

(* You can define functions. *)
let double x = 2 * x

(* Functions can be recursive. *)
let rec fact n =
  if n = 0 then 1 else n * fact (n - 1)

(* Or even mutually recursive. *)
let rec even n =
  match n with
  | 0 -> true
  | x -> odd (x-1)
and odd n =
  match n with
  | 0 -> false
  | x -> even (x-1)

(* You can declare your own types. *)
type shape =
  | Circle of float
  | Rectangle of float * float

(* And you can use pattern matching to define functions on such types. *)
let area shape =
  match shape with
  | Circle r -> 3.14159 *. r *. r
  | Rectangle (w, h) -> w *. h

(* You can write the above using the "function" shortcut. *)
let perimeter = function
  | Circle r -> 2.0 *. 3.14159 *. r
  | Rectangle (w, h) -> 2.0 *. (w +. h)

(* Like in OCaml, a double semicolon separates commands in a file. *)
;;

(** Printing to the standard output *)

(* The main premise of algebraic effects, which is what Eff is based on,
   is that each effect (manipulating memory, exceptions, ...) arises from
   a set of basic operations, for example lookup & update or raise.
   For example, we print out messages by calling the operation
   "#Print". Here, "Print" is the operation name that signifies the action,
   and "#" indicates that it is an operation. *)

(* To recap: you print out messages by calling "#Print". For example: *)

#Print "Hello, world!\n" ;;

(* Where Eff really differs from OCaml is that you can handle such calls.
   For example, the program inside the handler would print "A", "B", "C" and "D",
   but the handler overrides it just as an exception handler would override an
   exception. Thus, the program should output just:

    "I see you tried to print A. Not so fast!"

   *)

handle
    #Print "A";
    #Print "B";
    #Print "C";
    #Print "D"
with
| #Print msg k ->
    #Print ("I see you tried to print " ^ msg ^ ". Not so fast!\n")
;;

(* You may be wondering what the second parameter "k" in the handling clause
   for #Print is. It stands for the continuation, i.e. the part of the program
   that is waiting for the result of print. The difference between exception
   handlers and general effect handlers is that we may call this continuation.
   For example, instead of stopping after the first print like above, we may
   handle it and then resume the continuation by passing it "()", the unit
   result expected from the call of "#Print". *)

handle
    #Print "A";
    #Print "B";
    #Print "C";
    #Print "D"
with
| #Print msg k ->
    #Print ("I see you tried to print " ^ msg ^ ". Okay, you may.\n");
    k ()
;;

(* The handlers may be even more complex. For example, we may create a handler
   to collect all #Print calls, and instead of printing the strings separately,
   the handler returns a combined string. *)

let collect = handler
    | val x -> (x, "")
    | #Print msg k ->
        let (result, msgs) = k () in
        (result, msg ^ msgs)
;;

with collect handle
    #Print "A";
    #Print "B";
    #Print "C";
    #Print "D"
;;

(** Non-determinism *)

(* We will model non-determinism by implementing two operations, Decide and
   Fail. Decide will be used to `non-deterministically' choose the correct path
   while Fail signals that a choice fails to return a suitable answer. *)

effect Fail : unit -> empty
effect Decide : unit -> bool

(* We use a trick to ensure that using Fail typechecks correctly by wrapping
   it into a function. For aesthetic purposes we also wrap Decide in a function. *)

let fail () = (match #Fail () with)
let decide () = #Decide ()
;;

(* We create a few different handlers to handle the above effects. The simplest
   handler is "choose_true" that always decides to use true. A more interesting
   example is the "choose_max" handler, that returns the maximal result for all
   possible choices, while "choose_all" instead returns a list of all possible
   results. *)

let choose_true =
    handler
    | #Decide () k -> k true

let choose_max =
    handler
    | #Decide () k -> max (k true) (k false)

let choose_all =
    handler
    | val x -> [x]
    | #Fail () _ -> []
    | #Decide () k -> (k true) @ (k false)
;;

(* Even on a small example the behaviour of the three handlers varies greatly. *)
with choose_true handle
  let x = (if #Decide () then 10 else 20) in
  let y = (if #Decide () then 0 else 5) in
  x - y
;;

with choose_max handle
  let x = (if #Decide () then 10 else 20) in
  let y = (if #Decide () then 0 else 5) in
  x - y
;;

with choose_all handle
  let x = (if #Decide () then 10 else 20) in
  let y = (if #Decide () then 0 else 5) in
  x - y
;;

(* We can use our boolean decision to construct a decision over integers.
   In the decision we only consider integers on an interval [m,n]. *)

let rec choose_int m n =
  if m > n then
    fail ()
  else if #Decide () then
    m
  else
    choose_int (m + 1) n
;;

(* This can be used for finding pythagorean triples. *)
let int_sqrt m =
  let rec try n =
    let n2 = n ** 2 in
    if n2 > m then
      None
    else if n2 = m then
      Some n
    else
      try (n + 1)
  in
  try 0

let pythagorean m n =
  (* Choose bigger integer. *)
  let a = choose_int m (n - 1) in
  (* Choose smaller integer. *)
  let b = choose_int a n in
  (* Check if they are part of a pythagorean triple. *)
  match int_sqrt (a ** 2 + b ** 2) with
  | None -> fail ()
  | Some c -> (a, b, c)
;;

(* We also construct an additional handler that simply tries to get one viable
   solution. *)
let backtrack = handler
| #Decide () k ->
    handle k false with
    | #Fail () _ -> k true
;;


(* You can test the above handlers on the following examples. *)
with choose_all handle
  pythagorean 5 7
;;

with backtrack handle
  pythagorean 5 15
;;

with choose_all handle
  pythagorean 3 4
;;

with choose_all handle
  pythagorean 5 15
;;


(* Eight queens problem *)

let rec choose xs =
  match xs with
  | [] -> fail ()
  | x :: xs -> if c#decide () then x else choose xs

let no_attack (x, y) (x', y') =
  x <> x' && y <> y' && abs (x - x') <> abs (y - y');;

let available x qs =
  filter (fun y -> forall (no_attack (x, y)) qs) [1; 2; 3; 4; 5; 6; 7; 8];;

let rec place x qs =
  if x = 9 then qs else
  let y = choose (available x qs) in
  place (x + 1) ((x, y) :: qs)

let backtrack = handler
| c#decide () k ->
    handle k true with
    | c#fail () _ -> k false

;;

with backtrack handle
  place 1 []


;;

(** Probability *)

type random_choice = effect
  operation toss : float -> bool
end

let c = new random_choice

let rec uniform = function
  | [x] -> x
  | x :: xs ->
      let n = length xs + 1 in
      let p = 1.0 /. float_of_int n in
      if c#toss p then x else uniform xs

let expectation f = handler
  | val v -> f v
  | c#toss p k -> p *. k true +. (1.0 -. p) *. k false

;;

with expectation (fun x -> float_of_int (x + 3)) handle
  let x = uniform [1; 2; 3; 4; 5; 6] in
  let y = uniform [1; 2; 3; 4; 5; 6] in
  x + y

;;

let combine p dist1 dist2 =
  let scale p dist = map (fun (x, q) -> (x, p *. q)) dist in
  let rec add (x, p) = function
    | [] -> [(x, p)]
    | (y, q) :: dist ->
      if x = y then (x, p +. q) :: dist else (y, q) :: add (x, p) dist
  in
  let dist1 = scale p dist1 in
  let dist2 = scale (1.0 -. p) dist2 in
  fold_right add dist1 dist2

(* This handler computes the distribution of outcomes of a probabilisitic
   computation. *)
let distribution = handler
  | val v -> [(v, 1.0)]
  | c#toss p k -> combine p (k true) (k false)

;;

with distribution handle
  let x = uniform [1; 2; 3; 4; 5; 6] in
  let y = uniform [1; 2; 3; 4; 5; 6] in
  x + y

;;

(** State *)

type 'a state = effect
  operation get: unit -> 'a
  operation set: 'a -> unit
end

let r = new state

let monad_state r = handler
  | val y -> (fun _ -> y)
  | r#get () k -> (fun s -> k s s)
  | r#set s' k -> (fun _ -> k () s')

;;

let f = with monad_state r handle
    let x = r#get () in
    r#set (2 * x);
    r#get ()
in
f 30

;;

let better_state r x = handler
  | val y -> (fun s -> (y, s))
  | r#get () k -> (fun s -> k s s)
  | r#set s' k -> (fun _ -> k () s')
  | finally f -> f x

let r' = new state
;;

with better_state r 20 handle
    with better_state r' 30 handle
        let x = r#get () in
        let y = r'#get () in
        r'#set (x * y);
        r'#get () + 1

;;

let transaction r = handler
  | r#get () k -> (fun s -> k s s)
  | r#set s' k -> (fun s -> k () s')
  | val x -> (fun s -> r#set s; x)
  | finally f -> f (r#get ())

let e = new exception

;;

with better_state r 10 handle
  handle
    r#set 20;
    (with transaction r handle
      r#set 30;
      r#set 50);
    print (r#get ())
  with
  e#raise x _ -> print (x, r#get ())

;;

(** Multi-threading *)

type coop = effect
  operation yield : unit -> unit
  operation spawn : (unit -> unit) -> unit
end

let round_robin c =
  let threads = ref [] in
  let enqueue t = threads := !threads @ [t] in
  let dequeue () =
    match !threads with
    | [] -> ()
    | t :: ts -> threads := ts; t ()
  in
  let rec scheduler () = handler
    | c#yield () k -> enqueue k; dequeue ()
    | c#spawn t k -> enqueue k; with scheduler () handle t ()
    | val () -> dequeue ()
  in
  scheduler ()

let c = new coop

;;

with round_robin c handle
  c#spawn (fun _ ->
    iter (fun x -> #Print x; c#yield ()) ["a"; "b"; "c"; "d"; "e"]
  );
  c#spawn (fun _ ->
    iter (fun x -> #Print x; c#yield ()) ["A"; "B"; "C"; "D"; "E"]
  )

;;

let rec fractions d e =
  (* Spawn a thread for the next denominator *)
    if d <= e then c#spawn (fun _ -> c#yield (); fractions (d + 1) e) else () ;
    (* List all the fractions with the current denominator *)
    for numerator = 1 to d - 1 do
      (* If the fraction is reduced, print it and yield *)
      if gcd numerator d = 1 then
        print_string (to_string numerator ^ "/" ^ to_string d ^ ", ");
        c#yield ()
      else ()
    done

;;

(* You can try this, but it may not stop. *)
(*
with round_robin c handle
  fractions 1 4
*)
