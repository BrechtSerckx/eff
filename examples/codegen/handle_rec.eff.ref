type (_,_) effect +=
  | Effect_Eff: (unit,unit) effect 
;;let rec _f_279 _x_280 =
    match run ((binary_builtin Pervasives.(=)) (_x_280, 0)) with
    | true  -> value 1
    | false  ->
        call Effect_Eff ()
          (fun _result_81  ->
             _f_279 (run ((binary_builtin Pervasives.(-)) (_x_280, 1))))
     in
  handle
    {
      value_clause = (fun _gen_id_par_289  -> value _gen_id_par_289);
      finally_clause = (fun _gen_id_par_288  -> value _gen_id_par_288);
      effect_clauses = fun (type a) -> fun (type b) ->
        fun (x : (a,b) effect)  ->
          (match x with
           | Effect_Eff  ->
               (fun (() : unit)  ->
                  fun (_k_285 : unit -> _ computation)  ->
                    (_k_285 ()) >>
                      (fun _gen_bind_287  ->
                         (binary_builtin Pervasives.( * )) (_gen_bind_287, 2)))
           | eff' -> (fun arg  -> fun k  -> Call (eff', arg, k)) : a ->
                                                                    (b ->
                                                                    _
                                                                    computation)
                                                                    ->
                                                                    _
                                                                    computation)
    } (_f_279 5)
;;let rec _g_290 _x_291 =
    match run ((binary_builtin Pervasives.(=)) (_x_291, 0)) with
    | true  -> value 1
    | false  -> _g_290 (run ((binary_builtin Pervasives.(-)) (_x_291, 1)))
     in
  value (run (_g_290 5))
