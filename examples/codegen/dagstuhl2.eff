effect Eff : int -> int

;;

handle
  #Eff 1 + 3
with
| #Eff x k -> k (x + 2)
| val y -> y + 4

;;

effect Decide : unit -> bool

let choose_sum = handler
  | #Decide () k -> k true + k false

let choose_all = handler
  | #Decide () k -> k true @ k false
  | val x -> [x]

;;

with choose_sum handle
  let x = (if #Decide () then 10 else 20) in
  let y = (if #Decide () then 0 else 5) in
  x - y

;;

with choose_all handle
  let x = (if #Decide () then 10 else 20) in
  let y = (if #Decide () then 0 else 5) in
  x - y
