(* This example does not work, it seems. *)

type 'a player = effect
  operation move : 'a list -> 'a
end

let rec optimal p = handler
  | val w -> w
  | p#move lst k ->
    let rec search = function
      | [] -> failwith "got stuck"
      | [x] -> k x
      | x :: xs ->
        let q = k x in
        if p = q then p else search xs
    in
    search lst ;;

let wins moves =
  exists (fun (a, b, c) -> mem a moves && mem b moves && mem c moves)
     [(1,2,3); (4,5,6); (7,8,9); (1,4,7); (2,5,8); (3,6,9); (1,5,9); (3,5,7)] ;;

let rec tictactoe player opponent (p,o) =
  if wins p then player
  else
    match complement [1; 2; 3; 4; 5; 6; 7; 8; 9] (p @ o) with
      | [] -> opponent
      | lst ->
        let m = player#move lst in
          tictactoe opponent player (o, m :: p) ;;

let alice = new player ;;
let bob = new player ;; 

(* let game =
  with optimal alice handle
   with optimal bob handle
     tictactoe alice bob ([],[]) ;; *)

(* check game ;; *)
