(* Choice is given by a single [arb] operation, which nondeterministically
   chooses either [true] or [false]. *)
type choice = effect
  operation arb : unit -> bool
end

(* [choose c x y] nondeterministically chooses between [x] and [y]. *)
let choose c x y = if c#arb () then x else y

(* [select c lst] nondeterministically selects an element in list [lst]. *)
let rec select c = function
  | [] -> raise invalidArgument "select"
  | [x] -> x
  | x :: xs -> choose c x (select c xs)

(* Handling with [choose_true] makes [c#arb] always result in [true]. *)
let choose_true c = handler
  | c#arb () k -> k true

(* Handling with [choose_false] makes [c#arb] always result in [false]. *)
let choose_false c = handler
  | c#arb () k -> k false

(* Handling with [choose_min] gives the smallest possible result. *)
let choose_min c = handler
  | c#arb () k -> min (k true) (k false)

(* Handling with [choose_max] gives the biggest possible result. *)
let choose_max c = handler
  | c#arb () k -> max (k true) (k false)

(* Handling with [choose_all] gives the list of all possible results. *)
let choose_all c = handler
  | c#arb () k -> k true @ k false
  | val x -> [x]

(* Let us create a new choice instance *)
let c = new choice ;;

(* This example by itself causes a runtime error. *)
(*  
let x = (if c#arb () then 10 else 20) in
let y = (if c#arb () then 0 else 5) in
  x - y ;;
 *)

check_val (
with choose_true c handle
  let x = (if c#arb () then 10 else 20) in
  let y = (if c#arb () then 0 else 5) in
    x - y
) ;;

(* This could also be written using an inline handler as *)
check_val (
handle
  let x = (if c#arb () then 10 else 20) in
  let y = (if c#arb () then 0 else 5) in
    x - y
with
| c#arb () k -> k true
) ;;

check_val (
with choose_all c handle
  let x = (if c#arb () then 10 else 20) in
  let y = (if c#arb () then 0 else 5) in
    x - y
) ;;

check_val (
let c1 = new choice in
let c2 = new choice in
  with choose_all c1 handle
  with choose_all c2 handle
    let x = (if c1#arb () then 10 else 20) in
    let y = (if c2#arb () then 0 else 5) in
      x - y
) ;;

check_val (
let c1 = new choice in
let c2 = new choice in
  with choose_all c2 handle
  with choose_all c1 handle
    let y = (if c2#arb () then 0 else 5) in
    let x = (if c1#arb () then 10 else 20) in
      x - y
) ;;

check_val (
let c1 = new choice in
let c2 = new choice in
  with choose_all c2 handle
  with choose_all c1 handle
    let x = (if c1#arb () then 10 else 20) in
    let y = (if c2#arb () then 0 else 5) in
      x - y
) ;;

(* An alternative approach is to take [select] as a primitive operation *)
type 'a select = effect
  operation select : 'a list -> 'a
end ;;

(* In this case, minimization is achieved with the following handler.
   Additionally, the handler can return a sensible list of choices made. *)

let select_min s = handler
  | val x -> (x, [])
  | s#select xs k ->
      let rec minimize = function
        | [x] -> let (y, zs) = k x in (y, x::zs)
        | x::xs ->
            let (y, zs)  = k x in
            let (y', zs') = minimize xs in
              if y < y' then (y, x::zs) else (y', zs')
      in
        minimize xs ;;

(* Shortest path in a directed graph (no cycles are allowed). A graph is represented by a
   an adjancency list with distances. *)

let shortest_path g x y =
  let s = new select in
  let rec path l u =
    if u = y
    then l
    else
      match assoc u g with
        | None -> failwith "No path"
        | Some nbh -> let (v,d) = s#select nbh in path (l+d) v
  in
    with select_min s handle path 0 x ;;

(* A sample graph. *)
let g = [("A", [("B", 3); ("C", 1)]) ;
         ("B", [("E", 5)]) ;
         ("C", [("B", 2); ("D", 1)]) ;
         ("D", [("E", 2)])] ;;

check (shortest_path g "A" "E") ;;
