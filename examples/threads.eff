type coop = effect
  operation yield : unit -> unit
  operation fork : (unit -> unit) -> unit
end


let fifo s =
  let rec scheduler () = handler
    | s#fork p k -> k (); with scheduler () handle p ()
    | s#yield () k -> k ()
  in
    scheduler () ;;

let lifo s =
  let rec scheduler () = handler
    | s#fork p k -> with scheduler () handle p (); k ()
    | s#yield () k -> k ()
  in
    scheduler () ;;

let round_robin c =
  let threads = ref [] in
  let enqueue t = threads := !threads @ [t] in
  let dequeue () =
    match !threads with
    | [] -> ()
    | t :: ts -> threads := ts ; t ()
  in
  let rec scheduler () = handler
    | c#yield () k -> enqueue k ; dequeue ()
    | c#fork t k -> enqueue k ; with scheduler () handle t ()
    | val () -> dequeue ()
  in
    scheduler () ;;

let c = new coop in
with round_robin c handle
  c#fork (fun _ ->
    for i = 1 to 5 do
      std#write "a" ;
      c#yield ()
    done) ;
  let d = new coop in
  with round_robin d handle
    d#fork (fun _ ->
      for j = 1 to 5 do
         std#write "x" ;
         d#yield ()
    done) ;
    for k = 1 to 5 do
      std#write "y" ;
      d#yield () ;
      c#yield ()
    done
;;

(* Enumerating all positive rational numbers. *)
(* let c = new coop in
  (* Lists all fractions with a given numerator, yielding after each one *)
  let rec fractions numerator =
    (* Start enumerating fractions with a bigger numerator *)
    c#fork (fun _ -> c#yield (); fractions (numerator + 1));
    (* And list all the fractions with the current one *)
    for denominator = 1 to numerator do
      print_endline (to_string numerator ^ "/" ^ to_string denominator);
      c#yield ()
    done
in
with round_robin c handle
  fractions 0
;; *)
    

(* example of two infinite loops yielding to one another *)
(* let c = new coop in
  with round_robin c handle
    c#fork (fun () ->
      while true do
        std#write "Robin!" ;
        c#yield ()
      done) ;
    while true do
      std#write "Batman!" ;
      c#yield ()
    done
;; *)

