type searcher =
effect
  operation search : integer -> bool
end ;;

let epsilon p =
  let s = new searcher in
    handle
      p s#search
    with
    | s#search n k ->
        (fun lst -> match assoc n lst with
                    | Some v -> k v lst
                    | None -> (match k true ((n,true)::lst) with
                               | (true, lst) -> (true, lst)
                               | (false, _) -> k false ((n,false)::lst)))
    | val b -> (fun lst -> (b, lst))
    | finally f ->
      let (_,lst) = f [] in
        (fun n -> match assoc n lst with Some v -> v | None -> true) ;;

let exists p = p (epsilon p) ;;

let forall p = not (exists (compose not p)) ;;

let equal f g = forall (fun a -> f a = g a) ;;

(*
# EXAMPLES:
#
#shift b f k = b if k == 0 else f (k - 1)
#
#def xor n f:
#    if n == 0:
#        True
#    else:
#        f n <> f (n - 1) && xor (n - 1) f
#
#f = epsilon (xor 9)
#
#check:
#    take f 20
#check:
#    xor 10 f
*)
