(*

This is repmin in Haskell - it traverses a binary tree with integers in leaves,
replacing them all with the smallest integer in the tree. The magic of Haskell
is that the function traverses the tree exactly once, not twice as the obvious
solution. 

data Tree = Leaf Int | Node Tree Tree deriving Show
repmin t = tr where (mn, tr) = walk mn t

walk mn (Leaf n) = (n, Leaf mn)
walk mn (Node t1 t2) =
    (n1 `min` n2, Node tr1 tr2)
    where
    (n1, tr1) = walk mn t1
    (n2, tr2) = walk mn t2

t = Node (Node (Leaf 10) (Leaf 5)) (Node (Leaf 2) (Node (Leaf 0) (Leaf 10)))
repmin t

This results in
Node (Node (Leaf 0) (Leaf 0)) (Node (Leaf 0) (Node (Leaf 0) (Leaf 0)))

I have a hunch that this could be possible to do in eff as well,
except one would use handlers instead of laziness. However, we only get
the smallest value found until the leaf was encountered, as seen by the second
example.

*)
type tree = Leaf of int | Node of tree * tree

type guesser = effect
  operation what_about : int -> int
end

let repmin t =
  let g = new guesser in
  let rec walk t =
    match t with
    | Leaf n -> Leaf (g#what_about n)
    | Node (t1, t2) -> Node (walk t1, walk t2)
  in
  handle
    walk t
  with
  | g#what_about m k ->
      fun n ->
        let mn = min m n in
        k mn mn
  | val x ->
      fun n ->
          x

let t = Node (Node (Leaf 10, Leaf 5), Node (Leaf 2, Node (Leaf 0, Leaf 10)));;
repmin t 100000 ;;

let t = Node (Node (Leaf 1, Leaf 5), Node (Leaf 2, Node (Leaf 0, Leaf 10)));;
repmin t 100000