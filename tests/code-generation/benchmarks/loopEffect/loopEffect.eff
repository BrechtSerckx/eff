effect Incr : unit -> unit
effect Get: unit -> int
effect Put: int -> unit

let incr_handler = handler
| val y -> (fun x -> x)
| #Incr () k -> (fun x -> k () (x + 1))

let state_handler = handler
| val y -> (fun x -> x)
| #Get () k -> (fun s -> k s s)
| #Put s' k -> (fun _ -> k () s')

let rec loop_pure n a =
    if n = 0 then
        a
    else
        loop_pure (n - 1) (a + 1)

let rec loop_incr n =
    if n = 0 then
        ()
    else
        (#Incr (); loop_incr (n - 1))

let rec loop_state n =
    if n = 0 then
        ()
    else
        (#Put ((#Get ()) + 1); loop_state (n - 1))

let pure n = loop_pure n 0

let incr n =
    (with incr_handler handle loop_incr n) 0

let state n =
    (with state_handler handle loop_state n) 0
