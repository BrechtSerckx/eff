- : int ! {Decide:ρ₁} |  = 10
val choose_all : τ₁ ! {Decide:ρ₁} ⟹ 
τ₂ list ! {Decide:ρ₂|δ₂} | τ₁ < τ₂; δ₁ < δ₂;  = <handler>
- : int list ! {Decide:ρ₁} |  = [10; 5; 20; 15]
val choose_all2 : τ₁ ! {Decide2:ρ₁} ⟹ 
τ₂ list ! {Decide2:ρ₂|δ₂} | τ₁ < τ₂; δ₁ < δ₂;  = <handler>
- : int list list ! {Decide2:ρ₁, Decide:ρ₂} |  = [[10; 5]; [20; 15]]
- : int list list ! {Decide:ρ₁, Decide2:ρ₂} |  = [[10; 20]; [5; 15]]
- : int list list ! {Decide:ρ₁, 
Decide2:ρ₂} |  = [[10; 20]; [10; 15]; [5; 20]; [5; 15]]
val choose_int : int -{Fail:ρ₁, Decide:ρ₂}→
                 τ₁ -{Fail:ρ₃, Decide:ρ₄}→ int | ρ₃ = ⊤,
ρ₄ = ⊤ = <fun>
val sqrt : τ₁ ⟶  int option |  = <fun>
val pythagorean : int ⟶ 
                  int -{Fail:ρ₁, Decide:ρ₂}→ int × int × int | ρ₁ = ⊤,
ρ₂ = ⊤ = <fun>
val backtrack : τ₁ ! {Fail:ρ₁, Decide:ρ₂} ⟹ 
τ₂ ! {Decide:ρ₃, 
Fail:ρ₄|δ₂} | τ₁ < τ₂; δ₁ < δ₂; ρ₁ < ρ₄;  = <handler>
val choose_all : τ₁ ! {Decide:ρ₁, Fail:ρ₂} ⟹ 
τ₂ list ! {Decide:ρ₃, 
Fail:ρ₄|δ₂} | τ₁ < τ₂; δ₁ < δ₂;  = <handler>
- : (int × int × int) list ! {Decide:ρ₁, 
Fail:ρ₂} |  = [(5, 12, 13); (6, 8, 10); (8, 15, 17); (9, 12, 15)]
