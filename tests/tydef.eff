type baire = int -> int

type 'a tree = Empty | Node of 'a * 'a tree * 'a tree

type complex = {re : float; im : float}

type ('k,'v) assoc = ('k * 'v) list


(* Mutually recursive types. *)
type cow = bull -> int

and bull =
   | Tail
   | Legs of bull list
   | Horns of cow

(* Handler type. *)
type 'a collector = 'a => 'a list ;;

check Tail ;;

check {re = 1.2; im = 2.4} ;;

check (Node (10, Empty, Node (20, Empty, Empty))) ;;

check (Horns (fun _ -> 10))

